import requests
from typing import Tuple, Optional
import time

GITHUB_API_BASE = 'https://api.github.com'

# --- GITHUB API HELPER ---
def github_api_get(url: str, params=None) -> Tuple[Optional[dict], Optional[str]]:
    """
    Helper for making GET requests to the GitHub API.
    Handles rate limits and common errors.
    Returns (data, error_message)
    """
    try:
        resp = requests.get(url, params=params, headers={'Accept': 'application/vnd.github.v3+json'})
        if resp.status_code == 403 and 'X-RateLimit-Remaining' in resp.headers and resp.headers['X-RateLimit-Remaining'] == '0':
            return None, 'GitHub API rate limit exceeded. Please try again later.'
        if resp.status_code == 404:
            return None, 'Repository not found.'
        if not resp.ok:
            return None, f'GitHub API error: {resp.status_code}.'
        return resp.json(), None
    except Exception as e:
        return None, str(e)

# --- REPO METADATA ---
def get_repo_info(owner: str, repo: str) -> Tuple[Optional[dict], Optional[str]]:
    """
    Fetches metadata for a given repo (stars, forks, issues, etc.).
    Also fetches open PR count and computes open issues (excluding PRs).
    """
    url = f'{GITHUB_API_BASE}/repos/{owner}/{repo}'
    data, error = github_api_get(url)
    if error:
        return None, error
    # Fetch pull requests count using the search API
    pulls_url = f'{GITHUB_API_BASE}/search/issues'
    pulls_params = {'q': f'repo:{owner}/{repo} is:pr is:open'}
    pulls_data, pulls_error = github_api_get(pulls_url, params=pulls_params)
    # If the API call fails, default pulls_count to 0
    pulls_count = pulls_data.get('total_count') if pulls_data and 'total_count' in pulls_data else 0
    info = {
        'name': data.get('name'),
        'description': data.get('description'),
        'stars': data.get('stargazers_count'),
        'forks': data.get('forks_count'),
        'watchers': data.get('watchers_count'),
        'owner': data.get('owner', {}).get('login'),
        'html_url': data.get('html_url'),
        'language': data.get('language'),
        # Subtract open PRs from open_issues_count to match GitHub UI
        'open_issues_count': (data.get('open_issues_count', 0) - pulls_count),
        'open_pulls_count': pulls_count
    }
    return info, None

# --- CONTRIBUTORS ---
def get_contributors(owner: str, repo: str) -> Tuple[Optional[list], Optional[str]]:
    """
    Fetches a list of contributors for a given repo.
    Each contributor includes login, contributions, avatar, and profile URL.
    """
    url = f'{GITHUB_API_BASE}/repos/{owner}/{repo}/contributors'
    data, error = github_api_get(url)
    if error:
        return None, error
    contributors = [
        {
            'login': c.get('login'),
            'contributions': c.get('contributions'),
            'avatar_url': c.get('avatar_url'),
            'html_url': c.get('html_url')
        }
        for c in data
    ]
    return contributors, None

# --- COMMIT ACTIVITY ---
def get_commit_activity(owner: str, repo: str) -> Tuple[Optional[list], Optional[str]]:
    """
    Fetches weekly commit activity for a given repo.
    Retries if GitHub is still generating stats.
    """
    url = f'{GITHUB_API_BASE}/repos/{owner}/{repo}/stats/commit_activity'
    max_retries = 3
    for attempt in range(max_retries):
        data, error = github_api_get(url)
        # If stats are being generated, GitHub returns None and no error
        if data is not None:
            return data, None
        if error and 'rate limit' in error.lower():
            return None, error
        # Wait and retry if stats are still being generated
        time.sleep(2)
    # If still no data after retries, return a specific message
    return None, 'Commit activity is being generated by GitHub. Please try again in a minute.'
